# Copyright (c) 2023 Cisco and/or its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: SONiC Software Data Plane Automation - Bring up
  hosts: clusters
  #remote_user: cisco
  tasks:
   - name: Ping my hosts
     ansible.builtin.ping:
     tags:
     - singleHop
     - multiHop
   - name: Load SONiC VPP Container Image
     shell: | 
       cd sonic-vpp
       docker load < docker-sonic-vpp.gz
     register: command_result
     failed_when: command_result.stderr != ''
     tags:
     - singleHop
     - multiHop
   - name: SONiC VPP image Verifcation
     shell: docker images | grep "sonic-vpp\|pause"
     changed_when: False
     register: command_result
     failed_when: command_result.stdout == ''
     tags:
     - singleHop
     - multiHop
   - name:  Create veth interface pairs for host
     shell: | 
       ip link add name veth_vpp1 type veth peer name vpp1
       ip link add name veth_vpp1 type veth peer name vpp1
     register: command_result
     failed_when: command_result.rc != 0 and "File exists" not in command_result.stderr 
     tags:
     - singleHop
     - multiHop
   - name:  Create veth interface pairs for vpp 
     shell: | 
       ip link add name ir_vpp1 type veth peer name ir_vpp2
     register: command_result
     failed_when: command_result.rc != 0 and "File exists" not in command_result.stderr 
     tags:
     - multiHop
   - name: Configure host 1 network namepaces 
     shell: | 
       ip netns add host-1.0
       ip link set dev veth_vpp1 netns host-1.0
       ip netns exec host-1.0 ip link set dev veth_vpp1 up
       ip netns exec host-1.0 ip addr add "{{ host_1_0_ip1 }}"/24 dev veth_vpp1
       ip netns exec host-1.0 ip route add "{{ host_1_0_route_1 }}"/24 via "{{ host_1_0_gw1 }}"
     register: command_result
     failed_when: command_result.rc != 0 and "File exists" not in command_result.stderr 
     tags:
     - singleHop
     - multiHop
   - name: Configure host 2 network namepaces 
     shell: | 
       ip link add name veth_vpp2 type veth peer name vpp2
       ip netns add host-2.0
       ip link set dev veth_vpp2 netns host-2.0
       ip netns exec host-2.0 ip link set dev veth_vpp2 up
       ip netns exec host-2.0 ip addr add "{{ host_2_0_ip1 }}"/24 dev veth_vpp2
       ip netns exec host-2.0 ip route add "{{ host_2_0_route1 }}"/24 via "{{ host_2_0_gw1 }}"
     register: command_result
     failed_when: command_result.rc != 0 and "File exists" not in command_result.stderr 
     tags:
     - singleHop
     - multiHop
   - name: Start SONiC VPP Container 
     shell: | 
       cd sonic-vpp
       ./start_sonic_vpp.sh start -n sonic-vpp -i vpp1,vpp2
     register: command_result
     failed_when: command_result.stdout == ''
     tags:
     - singleHop
   - name: Start SONiC VPP Container 1
     shell: | 
       cd sonic-vpp
       ./start_sonic_vpp.sh start -n sonic-vpp1 -i vpp1,ir_vpp1
     register: command_result
     failed_when: command_result.stdout == ''
     tags:
     - multiHop
   - name: Start SONiC VPP Container 2
     shell: | 
       cd sonic-vpp
       ./start_sonic_vpp.sh start -n sonic-vpp2 -i vpp2,ir_vpp2
     register: command_result
     failed_when: command_result.stdout == ''
     tags:
     - multiHop
   - name: Pause for 1 minutes for SONiC to bootup
     ansible.builtin.pause:
       minutes: 1
     tags:
     - singleHop
     - multiHop
   - name: Configure SONiC VPP Addresses - Container 1
     shell: | 
       docker exec -it sonic-vpp1 config interface ip add Ethernet0 "{{ host_1_0_gw1 }}"/24
       docker exec -it sonic-vpp1 config interface ip add Ethernet1 "{{ sonic_vpp1_3_0 }}"/24
       docker exec -it sonic-vpp1 config interface startup Ethernet0
       docker exec -it sonic-vpp1 config interface startup Ethernet1
     register: command_result
     failed_when: command_result.stderr != ''
     tags:
     - multiHop
   - name: Configure Static route - Container 1
     shell: | 
       docker exec -it sonic-vpp1 ip route add "{{ host_1_0_route_1 }}"/24 via "{{ sonic_vpp1_gw }}"
     register: command_result
     failed_when: command_result.stderr != ''
     tags:
     - static
   - name: Configure BGP Routing - Container 1
     ansible.builtin.shell: |
       set timeout 30
       spawn docker exec -it sonic-vpp1 bash
       expect ":/# "
       send "sudo config interface ip add Loopback0 {{ sonic_vpp1_Loopback0 }}/24\n"
       expect ":/# "
       send "sudo config interface startup Loopback0\n"
       expect ":/# "
       send "sudo config save -y\n"
       expect ":/# "
       send "vtysh\n"
       expect "# "
       send "config\n"
       expect "(config)# "
       send "router bgp {{ bgp_as }}\n"
       expect "(config-router)# "
       send "bgp router-id  {{ sonic_vpp1_Loopback0 }}\n"
       expect "(config-router)# "
       send "neighbor {{ sonic_vpp1_gw }} remote-as {{ bgp_as }}\n"
       expect "(config-router)# "
       send "address-family ipv4 unicast\n"
       expect "(config-router-af)# "
       send "network {{ host_1_0_prefix }}\n"
       expect "(config-router-af)# "
       send "neighbor {{ sonic_vpp1_gw }} activate\n"
       expect "(config-router-af)# "
       send "end\n"
       expect "# "
       exit 0
     args:
       executable: /usr/bin/expect
     tags:
     - bgp
   - name: Configure SONiC VPP Addresses - Container 2
     shell: | 
       docker exec -it sonic-vpp2 config interface ip add Ethernet0 "{{ host_2_0_gw1 }}"/24
       docker exec -it sonic-vpp2 config interface ip add Ethernet1 "{{ sonic_vpp1_gw }}"/24
       docker exec -it sonic-vpp2 config interface startup Ethernet0
       docker exec -it sonic-vpp2 config interface startup Ethernet1
     register: command_result
     failed_when: command_result.stderr != ''
     tags:
     - multiHop
   - name: Configure Static route - Container 2
     shell: | 
       docker exec -it sonic-vpp2 ip route add "{{ host_2_0_route1 }}"/24 via "{{ sonic_vpp1_3_0 }}"
     register: command_result
     failed_when: command_result.stderr != ''
     tags:
     - static
   - name: Configure BGP Routing - Container 2
     ansible.builtin.shell: |
       set timeout 30
       spawn docker exec -it sonic-vpp2 bash
       expect ":/# "
       send "sudo config interface ip add Loopback0 {{ sonic_vpp2_Loopback0 }}/24\n"
       expect ":/# "
       send "sudo config interface startup Loopback0\n"
       expect ":/# "
       send "sudo config save -y\n"
       expect ":/# "
       send "vtysh\n"
       expect "# "
       send "config\n"
       expect "(config)# "
       send "router bgp {{ bgp_as }}\n"
       expect "(config-router)# "
       send "bgp router-id  {{ sonic_vpp2_Loopback0 }}\n"
       expect "(config-router)# "
       send "neighbor {{ sonic_vpp1_3_0 }} remote-as {{ bgp_as }}\n"
       expect "(config-router)# "
       send "address-family ipv4 unicast\n"
       expect "(config-router-af)# "
       send "network {{ host_2_0_prefix }}\n"
       expect "(config-router-af)# "
       send "neighbor {{ sonic_vpp1_3_0 }} activate\n"
       expect "(config-router-af)# "
       send "end\n"
       expect "# "
       exit 0
     args:
       executable: /usr/bin/expect
     tags:
     - bgp
   - name: Configure SONiC VPP Addresses 
     shell: | 
       docker exec -it sonic-vpp config interface ip add Ethernet0 "{{ host_1_0_gw1 }}"/24
       docker exec -it sonic-vpp config interface ip add Ethernet1 "{{ host_2_0_ip1 }}"/24
       docker exec -it sonic-vpp config interface startup Ethernet0
       docker exec -it sonic-vpp config interface startup Ethernet1
     register: command_result
     failed_when: command_result.stderr != ''
     tags:
     - singleHop
   - name: Pause for 1 minutes for routing to settle
     ansible.builtin.pause:
       minutes: 1
     tags:
     - singleHop
     - multiHop
   - name: Verify SONiC Routing 1
     shell: | 
       ip netns exec host-1.0 ping -c5  "{{ host_1_0_gw1 }}"
     register: command_result
     failed_when: "'0 received' in command_result.stdout"
     tags:
     - singleHop
     - multiHop
   - name: Print message
     ansible.builtin.debug:
       msg: "{{ command_result }}"
     tags:
     - singleHop
     - multiHop
   - name: Verify SONiC Routing 2
     shell: | 
       ip netns exec host-1.0 ping -c5  "{{ host_2_0_ip1 }}"
     register: command_result
     failed_when: "'0 received' in command_result.stdout"
     tags:
     - singleHop
     - multiHop
   - name: Print message
     ansible.builtin.debug:
       msg: "{{ command_result }}"
     tags:
     - singleHop
     - multiHop
